{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","status","updateTitle","useState","isEditable","setEditing","title","newTitle","setNewTitle","key","id","className","classNames","completed","editing","onDoubleClick","type","onClick","checked","value","onChange","event","target","trim","onKeyUp","onBlur","TodoList","filteredTodos","map","TodosFilter","setFilter","selectedFilter","changeFilter","preventDefault","name","href","selected","App","todos","setTodos","newTodoTitle","setNewTodo","setStatus","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","completedTodos","filter","uncompletedTodos","filterTodos","All","Active","Completed","onSubmit","length","prevTodos","Date","placeholder","trimLeft","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76bfca20.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, deleteTodo, status, updateTitle }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleEditing = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        if (newTitle) {\n          updateTitle(todo.id, newTitle);\n        } else {\n          setNewTitle(todo.title);\n        }\n\n        setEditing(false);\n        break;\n      case 'Escape':\n        setEditing(false);\n        setNewTitle(todo.title);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (newTitle) {\n      updateTitle(todo.id, newTitle);\n    } else {\n      setNewTitle(todo.title);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setEditing(!isEditable)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onClick={() => status(todo.id)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => setNewTitle(event.target.value.trim())}\n        onKeyUp={handleEditing}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  status: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  filteredTodos,\n  deleteTodo,\n  status,\n  updateTitle,\n}) => (\n\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo => (\n      <TodoItem\n        todo={todo}\n        deleteTodo={deleteTodo}\n        status={status}\n        updateTitle={updateTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  status: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ setFilter, selectedFilter }) => {\n  const changeFilter = (event) => {\n    event.preventDefault();\n    setFilter(event.target.name);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({\n            selected: selectedFilter === 'All',\n          })}\n          name=\"All\"\n          onClick={changeFilter}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({\n            selected: selectedFilter === 'Active',\n          })}\n          name=\"Active\"\n          onClick={changeFilter}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({\n            selected: selectedFilter === 'Completed',\n          })}\n          name=\"Completed\"\n          onClick={changeFilter}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [newTodoTitle, setNewTodo] = useState('');\n  const [status, setStatus] = useState(false);\n  const [selectedFilter, setFilter] = useState('All');\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (newTodoTitle.length > 0) {\n      setTodos(prevTodos => (\n        [...prevTodos,\n          {\n            id: +new Date(),\n            title: newTodoTitle,\n            completed: false,\n          },\n        ]\n      ));\n      setNewTodo('');\n    }\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const makeAllTodosComplete = () => {\n    if (status) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setStatus(!status);\n  };\n\n  const updateTitle = (id, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todos,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const completedTodos = todos.filter(todo => todo.completed);\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const clearCompleted = () => {\n    setTodos(uncompletedTodos);\n  };\n\n  const FILTERS = {\n    All: 'All',\n    Active: 'Active',\n    Completed: 'Completed',\n  };\n\n  // eslint-disable-next-line consistent-return\n  const filterTodos = (key) => {\n    switch (key) {\n      case 'All':\n        return todos;\n\n      case 'Active':\n        return uncompletedTodos;\n\n      case 'Completed':\n        return completedTodos;\n\n      default:\n        break;\n    }\n  };\n\n  const filteredTodos = filterTodos(FILTERS[selectedFilter]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={handleSubmit}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={event => setNewTodo(event.target.value.trimLeft())}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={makeAllTodosComplete}\n        />\n\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          filteredTodos={filteredTodos}\n          deleteTodo={deleteTodo}\n          status={toggleCompletedStatus}\n          updateTitle={updateTitle}\n        />\n      </section>\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {uncompletedTodos.length}\n            {' '}\n            items left\n          </span>\n\n          <TodosFilter\n            setFilter={setFilter}\n            selectedFilter={selectedFilter}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}